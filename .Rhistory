for (i in 1:1000){
slow <- c(slow, i)
})
time
slow <- vector(length = 0)
fast <- rep(NA, 1000)
system.time(
for (i in 1:1000){
slow <- c(slow, i)
})
system.time(
for (i in 1:1000){
fast <- c(fast, i)
})
system.time(
for (i in 1:1000){
fast <- c(fast, i)
})
system.time(
for (i in 1:1000){
fast <- c(fast, i)
})
fast <- rep(NA, 1000)
system.time(
for (i in 1:1000){
fast <- c(fast, i)
})
fast <- rep(NA, 1000)
system.time(
for (i in 1:1000){
fast_out <- fast[i]
})
fast <- rep(NA, 1000)
system.time(
for (i in 1:length(fast)){
fast_out <- fast[i]
})
system.time(
for (i in 1:length(fast)){
fast[i] <- i
})
fast
slow <- vector(length = 0)
fast <- rep(NA, 1000)
system.time(
for (i in 1:1000){
slow <- c(slow, i)
})
system.time(
for (i in 1:length(fast)){
fast[i] <- i
})
slow <- vector(length = 0)
fast <- rep(NA, 1000)
time1 <- system.time(
for (i in 1:1000){
slow <- c(slow, i)
})
time2 <- system.time(
for (i in 1:length(fast)){
fast[i] <- i
})
time1
time2
slow <- vector(length = 0)
fast <- rep(NA, 1000)
time1 <- system.time(
for (i in 1:1000){
slow <- c(slow, i)
})
time2 <- system.time(
for (i in 1:length(fast)){
fast[i] <- i
})
time1
time2
slow <- vector(length = 0)
fast <- rep(NA, 1000)
system.time(
for (i in 1:1000){
slow <- c(slow, i)
})
system.time(
for (i in 1:length(fast)){
fast[i] <- i
})
slow <- vector(length = 0)
fast <- rep(NA, 1000)
system.time(
for (i in 1:1000){
slow <- c(slow, i)
})
system.time(
for (i in 1:length(fast)){
fast[i] <- i
})
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
cbPalette
palette.pals()
library(ggpubr)
citation("ggpubr")
library(tidyverse)
citation("tidyverse")
usshape <- "C:\Users\brown\Downloads\tl_2022_us_state.zip"
usshape <- "C:/Users/brown/Downloads/tl_2022_us_state.zip"
install.packages("tmap")
install.packages("tmaptools")
library(tmap)
library(tmaptools)
usgeo <- read_shape(file=usshape, as.sf = TRUE)
install.packages("rgdal")
library(rgdal)
usgeo <- readOGR(usshape)
usgeo <- readOGR(dsn = "C:/Users/brown/tl_2022_us_state.zip", layer= "tl_2022_us_state.shp")
usgeo <- readOGR(dsn = "C:/Users/brown/tl_2022_us_state.zip", layer= "tl_2022_us_state")
usgeo <- readOGR(dsn = "C:/Users/brown/Downloads", layer= "tl_2022_us_state")
plot(usgeo)
st_read
setwd("C:/Users/brown/GitHub/melospiza-melodia-phenotype/")
mm_full <- read.csv("melospiza-melodia-fullflat-raw.csv") ##unedited raw data
for (i in 1:dim(mm_full)[1]){
temp <- skin.meas.split(mm_full[i,"SKINMEAS"])
if(length(temp) >= 1) {
mm_full[i,29:35] <- temp
}
else {
mm_full[i,29:35]<- c(rep(NA,7))
}
}
source("C:/Users/brown/GitHub/CleanORNISFull/skinmeas-split-fun.R") ## function to clean skin measurements column
for (i in 1:dim(mm_full)[1]){
temp <- skin.meas.split(mm_full[i,"SKINMEAS"])
if(length(temp) >= 1) {
mm_full[i,29:35] <- temp
}
else {
mm_full[i,29:35]<- c(rep(NA,7))
}
}
mm_select <- mm_full[,c(1:4,6:12,18,29:35)]
colnames(mm_select) <- c("CATSFX","GENUS", "SPECIES","SUBSPECIES","AGE","SEX","DATE","STATE","COUNTY","SPECLOC","MASS","WCH","TL","TS","BL","BLH","BLW","SKL")
colnames(mm_select) <- c("CATSFX","GENUS", "SPECIES","SUBSPECIES","AGE","SEX","DATE","STATE","COUNTY","SPECLOC","MASS","WCH","TL","TS","BL","BLH","BLW","SKL")
mm_full_filtered <- mm_select %>%
mm_full_filtered <- mm_select %>%
filter(AGE == "AD" | AGE == "AHY") %>%
filter(SEX== "M")
library(tidyverse)
mm_full_filtered <- mm_select %>%
filter(AGE == "AD" | AGE == "AHY") %>%
filter(SEX== "M")
mm_full_filtered <- mm_select %>%
filter(AGE == "AD" | AGE == "AHY") %>%
filter(SEX== "M")
View(mm_full)
mm_full <- read.csv("melospiza-melodia-fullflat-raw.csv") ##unedited raw data
source("C:/Users/brown/GitHub/CleanORNISFull/skinmeas-split-fun.R") ## function to clean skin measurements column
for (i in 1:dim(mm_full)[1]){
temp <- skin.meas.split(mm_full[i,"SKINMEAS"])
if(length(temp) >= 1) {
mm_full[i,29:35] <- temp
}
else {
mm_full[i,29:35]<- c(rep(NA,7))
}
}
warnings
warnings()
## Select columns of interest
mm_select <- mm_full[,c(1:4,6:12,18,29:35)]
colnames(mm_select) <- c("CATSFX","GENUS", "SPECIES","SUBSPECIES","AGE","SEX","DATE","STATE","COUNTY","SPECLOC","MASS","WCH","TL","TS","BL","BLH","BLW","SKL")
mm_full_filtered <- mm_select %>%
filter(AGE == "AD" | AGE == "AHY") %>%
filter(SEX== "M")
## set working directory
setwd("C:/Users/brown/GitHub/melospiza-melodia-phenotype/")
source("C:/Users/brown/GitHub/CleanORNISFull/skinmeas-split-fun.R") ## function to clean skin measurements column
mm_full <- read.csv("melospiza-melodia-fullflat-raw.csv") ##unedited raw data
for (i in 1:dim(mm_full)[1]){
temp <- skin.meas.split(mm_full[i,"SKINMEAS"])
if(length(temp) >= 1) {
mm_full[i,29:35] <- temp
}
else {
mm_full[i,29:35]<- c(rep(NA,7))
}
}
## Select columns of interest
mm_select <- mm_full[,c(1,4,6,7,18,29:35)]
colnames(mm_select) <- c("CATSFX","SUBSPECIES","AGE","SEX","MASS","WCH","TL","TS","BL","BLH","BLW","SKL")
mm_full_filtered <- mm_select %>%
filter(AGE == "AD" | AGE == "AHY") %>%
filter(SEX== "M")
## Select columns of interest
mm_select <- mm_full[,c(1:4,6:12,18,29:35)]
colnames(mm_select) <- c("CATSFX","GENUS","SPECIES","SUBSPECIES","AGE","SEX","DATE","STATE","COUNTY","SPECLOC","MASS","WCH","TL","TS","BL","BLH","BLW","SKL")
mm_full_filtered <- mm_select %>%
filter(AGE == "AD" | AGE == "AHY") %>%
filter(SEX== "M")
mm_full_filtered <- mm_select %>%
filter(AGE == "AD" | AGE == "AHY") %>%
filter(SEX== "M")
mm_select <- mm_full[,c(1,4,6,7,18,29:35)]
colnames(mm_select) <- c("CATSFX","SUBSPECIES","AGE","SEX","MASS","WCH","TL","TS","BL","BLH","BLW","SKL")
mm_select <- mm_full[,c(1:4,6:12,18,29:35)]
colnames(mm_select) <- c("CATSFX", "GENUS","SPECIES",'SUBSPECIES","AGE","SEX","DATE","COUNTRY","COUNTY","SPECLOC","MASS","WCH","TL","TS","BL","BLH","BLW","SKL")
mm_full_filtered <- mm_select %>%
filter(AGE == "AD" | AGE == "AHY") %>%
filter(SEX== "M")
mm_full_filtered <- mm_select %>%
filter(AGE == "AD" | AGE == "AHY") %>%
filter(SEX== "M")
colnames(mm_select) <- c("CATSFX", "GENUS","SPECIES","SUBSPECIES","AGE","SEX","DATE","COUNTRY","COUNTY","SPECLOC","MASS","WCH","TL","TS","BL","BLH","BLW","SKL")
mm_select <- mm_full[,c(1:4,6:12,18,29:35)]
colnames(mm_select) <- c("CATSFX", "GENUS","SPECIES","SUBSPECIES","AGE","SEX","DATE","COUNTRY","COUNTY","SPECLOC","MASS","WCH","TL","TS","BL","BLH","BLW","SKL")
mm_full_filtered <- mm_select %>%
filter(AGE == "AD" | AGE == "AHY") %>%
filter(SEX== "M")
library(tidyverse)
library(devtools)
mm_select <- mm_full[,c(1:4,6:12,18,29:35)]
colnames(mm_select) <- c("CATSFX", "GENUS","SPECIES","SUBSPECIES","AGE","SEX","DATE","COUNTRY","COUNTY","SPECLOC","MASS","WCH","TL","TS","BL","BLH","BLW","SKL")
mm_full_filtered <- mm_select %>%
filter(AGE == "AD" | AGE == "AHY") %>%
filter(SEX== "M")
View(mm_select)
View(mm_full)
mm_full_filtered <- mm_full %>%
filter(AGE == "AD" | AGE == "AHY") %>%
filter(SEX== "M")
View(mm_full_filtered)
View(mm_select)
View(mm_full_filtered)
View(mm_select)
colnames(mm_full_filtered) <- c("CATSFX","GENUS","SPECIES","SUBSPECIES","HYBRIDTYPE","AGE","SEX","DATE","COUNTRY","STATE","COUNTY","SPECLOC","COLLECTOR","CFIRSTNAME","COLLCATNUM","PREPATOR","PFIRSTNAME","MASS","BODYCON","REMARKS","DISPOS","AVAIL", "SKINMEAS","EDWARDS", "LATDEG","LATMIN","LONDEG","LONGMIN","WCH","TL","TS","BL","BLH","BLW","SKL")
mm_full_filtered <- mm_full %>%
filter(AGE == "AD" | AGE == "AHY") %>%
filter(SEX== "M")
colnames(mm_full) <- c("CATSFX","GENUS","SPECIES","SUBSPECIES","HYBRIDTYPE","AGE","SEX","DATE","COUNTRY","STATE","COUNTY","SPECLOC","COLLECTOR","CFIRSTNAME","COLLCATNUM","PREPATOR","PFIRSTNAME","MASS","BODYCON","REMARKS","DISPOS","AVAIL", "SKINMEAS","EDWARDS", "LATDEG","LATMIN","LONDEG","LONGMIN","WCH","TL","TS","BL","BLH","BLW","SKL")
mm_full_filtered <- mm_full %>%
filter(AGE == "AD" | AGE == "AHY") %>%
filter(SEX== "M")
View(mm_full_filtered)
View(mm_full)
mm_full <- read.csv("melospiza-melodia-fullflat-raw.csv") ##unedited raw data
source("C:/Users/brown/GitHub/CleanORNISFull/skinmeas-split-fun.R") ## function to clean skin measurements column
for (i in 1:dim(mm_full)[1]){
temp <- skin.meas.split(mm_full[i,"SKINMEAS"])
if(length(temp) >= 1) {
mm_full[i,29:35] <- temp
}
else {
mm_full[i,29:35]<- c(rep(NA,7))
}
}
colnames(mm_full) <- c("CATSFX","GENUS","SPECIES","SUBSPECIES","HYBRIDTYPE","AGE","SEX","DATE","COUNTRY","STATE","COUNTY","SPECLOC","COLLECTOR","CFIRSTNAME","COLLCATNUM","PREPATOR","PFIRSTNAME","MASS","BODYCON","REMARKS","DISPOS","AVAIL", "SKINMEAS","EDWARDS", "LATDEG","LATMIN","LONDEG","LONGMIN","WCH","TL","TS","BL","BLH","BLW","SKL")
mm_full_filtered <- mm_full %>%
filter(AGE == "AD" | AGE == "AHY") %>%
filter(SEX== "M")
## Create separate data frames for each subspecies
mm_maxima_full <- mm_full_filtered %>% filter(SUBSPECIES == "maxima")
mm_sanaka_full <- mm_full_filtered %>% filter(SUBSPECIES == "sanaka")
mm_insignis_full <- mm_full_filtered %>% filter(SUBSPECIES == "insignis")
mm_caurina_full <- mm_full_filtered %>% filter(SUBSPECIES == "caurina")
mm_rufina_full <- mm_full_filtered %>% filter(SUBSPECIES == "rufina")
## Make new data frames for each subspecies and pull out numerical data
# maxima
mm_maxima <- mm_full_filtered %>%
filter(SUBSPECIES == "maxima") %>%
select(MASS, WCH, TL, TS, BL, BLH, BLW, SKL)
z_score_maxima <- scale(mm_maxima)  ## Compute z scores
outliers_maxima <- which(z_score_maxima >=3)    ## tag the rows containing outliers
mm_maxima_clean <- mm_maxima_full[-c(outliers_maxima),]  ## make new dataframe without outliers
## Repeat above steps for each subspecies
# sanaka
mm_sanaka <- mm_full_filtered %>%
filter(SUBSPECIES == "sanaka") %>%
select(MASS, WCH, TL, TS, BL, BLH, BLW, SKL)
z_score_sanaka <- scale(mm_sanaka)  ## Compute z scores
outliers_sanaka <- which(z_score_sanaka >=3)    ## tag the rows containing outliers
mm_sanaka_clean <- mm_sanaka_full[-c(outliers_sanaka),]  ## make new dataframe without outliers
# insignis
mm_insignis <- mm_full_filtered %>%
filter(SUBSPECIES == "insignis") %>%
select(MASS, WCH, TL, TS, BL, BLH, BLW, SKL)
z_score_insignis <- scale(mm_insignis)  ## Compute z scores
outliers_insignis <- which(z_score_insignis >=3)    ## tag the rows containing outliers
# caurina
mm_caurina <- mm_full_filtered %>%
filter(SUBSPECIES == "caurina") %>%
select(MASS, WCH, TL, TS, BL, BLH, BLW, SKL)
z_score_caurina <- scale(mm_caurina)  ## Compute z scores
outliers_caurina <- which(z_score_caurina >=3)    ## tag the rows containing outliers
mm_caurina_clean <- mm_caurina_full[-c(outliers_caurina),]  ## make new dataframe without outliers
# rufina
mm_rufina <- mm_full_filtered %>%
filter(SUBSPECIES == "rufina") %>%
select(MASS, WCH, TL, TS, BL, BLH, BLW, SKL)
z_score_rufina <- scale(mm_rufina)  ## Compute z scores
outliers_rufina <- which(z_score_rufina >=3)    ## tag the rows containing outliers
mm_rufina_clean <- mm_rufina_full[-c(outliers_rufina),]  ## make new dataframe without outliers
mm_full_clean <- bind_rows(mm_maxima_clean,mm_sanaka_clean,mm_insignis_full,mm_caurina_clean,mm_rufina_clean)
## Finally remove NAs
mm_final <- mm_full_clean %>%
filter(!is.na(MASS)) %>%
filter(!is.na(WCH)) %>%
filter(!is.na(TL)) %>%
filter(!is.na(TS)) %>%
filter(!is.na(BL)) %>%
filter(!is.na(BLW)) %>%
filter(!is.na(BLH)) %>%
filter(!is.na(SKL))
View(mm_final)
mm_info <- mm_final[,c(1:4,6:12,15)]
View(mm_info)
write.csv(mm_info, "melospiza-melodia-filtered.csv", row.names = FALSE)
write.csv(mm_info, "melospiza-melodia-info.csv", row.names = FALSE)
## set working directory
setwd("C:/Users/brown/GitHub/melospiza-melodia-phenotype/")
source("C:/Users/brown/GitHub/CleanORNISFull/skinmeas-split-fun.R") ## function to clean skin measurements column
mm_full <- read.csv("melospiza-melodia-fullflat-raw.csv") ##unedited raw data
for (i in 1:dim(mm_full)[1]){
temp <- skin.meas.split(mm_full[i,"SKINMEAS"])
if(length(temp) >= 1) {
mm_full[i,29:35] <- temp
}
else {
mm_full[i,29:35]<- c(rep(NA,7))
}
}
## Select columns of interest
mm_select <- mm_full[,c(1,4,6,7,18,29:35)]
colnames(mm_select) <- c("CATSFX","SUBSPECIES","AGE","SEX","MASS","WCH","TL","TS","BL","BLH","BLW","SKL")
mm_full_filtered <- mm_select %>%
filter(AGE == "AD" | AGE == "AHY") %>%
filter(SEX== "M")
## Create separate data frames for each subspecies
mm_maxima_full <- mm_full_filtered %>% filter(SUBSPECIES == "maxima")
mm_sanaka_full <- mm_full_filtered %>% filter(SUBSPECIES == "sanaka")
mm_insignis_full <- mm_full_filtered %>% filter(SUBSPECIES == "insignis")
mm_caurina_full <- mm_full_filtered %>% filter(SUBSPECIES == "caurina")
mm_rufina_full <- mm_full_filtered %>% filter(SUBSPECIES == "rufina")
## Make new data frames for each subspecies and pull out numerical data
# maxima
mm_maxima <- mm_full_filtered %>%
filter(SUBSPECIES == "maxima") %>%
select(MASS, WCH, TL, TS, BL, BLH, BLW, SKL)
z_score_maxima <- scale(mm_maxima)  ## Compute z scores
outliers_maxima <- which(z_score_maxima >=3)    ## tag the rows containing outliers
mm_maxima_clean <- mm_maxima_full[-c(outliers_maxima),]  ## make new dataframe without outliers
## Repeat above steps for each subspecies
# sanaka
mm_sanaka <- mm_full_filtered %>%
filter(SUBSPECIES == "sanaka") %>%
select(MASS, WCH, TL, TS, BL, BLH, BLW, SKL)
z_score_sanaka <- scale(mm_sanaka)  ## Compute z scores
outliers_sanaka <- which(z_score_sanaka >=3)    ## tag the rows containing outliers
mm_sanaka_clean <- mm_sanaka_full[-c(outliers_sanaka),]  ## make new dataframe without outliers
# insignis
mm_insignis <- mm_full_filtered %>%
filter(SUBSPECIES == "insignis") %>%
select(MASS, WCH, TL, TS, BL, BLH, BLW, SKL)
z_score_insignis <- scale(mm_insignis)  ## Compute z scores
outliers_insignis <- which(z_score_insignis >=3)    ## tag the rows containing outliers
# caurina
mm_caurina <- mm_full_filtered %>%
filter(SUBSPECIES == "caurina") %>%
select(MASS, WCH, TL, TS, BL, BLH, BLW, SKL)
z_score_caurina <- scale(mm_caurina)  ## Compute z scores
outliers_caurina <- which(z_score_caurina >=3)    ## tag the rows containing outliers
mm_caurina_clean <- mm_caurina_full[-c(outliers_caurina),]  ## make new dataframe without outliers
# rufina
mm_rufina <- mm_full_filtered %>%
filter(SUBSPECIES == "rufina") %>%
select(MASS, WCH, TL, TS, BL, BLH, BLW, SKL)
z_score_rufina <- scale(mm_rufina)  ## Compute z scores
outliers_rufina <- which(z_score_rufina >=3)    ## tag the rows containing outliers
mm_rufina_clean <- mm_rufina_full[-c(outliers_rufina),]  ## make new dataframe without outliers
mm_full_clean <- bind_rows(mm_maxima_clean,mm_sanaka_clean,mm_insignis_full,mm_caurina_clean,mm_rufina_clean)
## Finally remove NAs
mm_final <- mm_full_clean %>%
filter(!is.na(MASS)) %>%
filter(!is.na(WCH)) %>%
filter(!is.na(TL)) %>%
filter(!is.na(TS)) %>%
filter(!is.na(BL)) %>%
filter(!is.na(BLW)) %>%
filter(!is.na(BLH)) %>%
filter(!is.na(SKL))
## export mm_final dataframe as a csv
write.csv(mm_final, "melospiza-melodia-filtered.csv", row.names = FALSE)
m <- ggplot(data=mm_final, aes(order, MASS))+
geom_boxplot(color = 'black', fill = col.pallete)+
labs(x = "Subspecies",y= "Mass (g)")
library(devtools)
library(tidyverse)
library(ggplot2)
library(ggord)
library(ggpubr)
mm_final_std <- scale(mm_final[,c(5:12)], scale = TRUE, center = T) ## z-transform data
mm_final_pca <- prcomp(mm_final_std, scale = TRUE) ## pca of transformed data
mm_final_pca$rotation <- mm_final_pca$rotation *9 ## make the arrows on the PCA longer
ggord(mm_final_pca, mm_final$order,
cols= col.pallete,
xlims = c(-6,7), ylims = c(-10, 8), veclsz = 0.75,
grp_title = "subspecies"
) +
scale_shape_manual(values = c(21,25,22,23,24))
order_variable <- factor(mm_final$SUBSPECIES, levels = c("caurina", "rufina"))
ord_plot +
geom_point(aes(shape = subspecies), size = 3, position = position_dodge(width = 0.2), data = subset(mm_final, subspecies == "caurina" & order_variable %in% c("caurina", "rufina"))) +
scale_shape_manual(values = c(21, 25, 22, 23, 24)) +
theme_minimal()
ord_plot <-ggord(mm_final_pca, mm_final$order,
cols= col.pallete,
xlims = c(-6,7), ylims = c(-10, 8), veclsz = 0.75,
grp_title = "subspecies"
)
order_variable <- factor(mm_final$SUBSPECIES, levels = c("caurina", "rufina"))
ord_plot +
geom_point(aes(shape = subspecies), size = 3, position = position_dodge(width = 0.2), data = subset(mm_final, subspecies == "caurina" & order_variable %in% c("caurina", "rufina"))) +
scale_shape_manual(values = c(21, 25, 22, 23, 24)) +
theme_minimal()
ord_plot +
geom_point(aes(shape = subspecies), size = 3, position = position_dodge(width = 0.2), data = subset(mm_final, SUBSPECIES == "caurina" & order_variable %in% c("caurina", "rufina"))) +
scale_shape_manual(values = c(21, 25, 22, 23, 24)) +
theme_minimal()
ord_plot +
geom_point(aes(shape = SUPSPECIES), size = 3, position = position_dodge(width = 0.2), data = subset(mm_final, SUBSPECIES == "caurina" & order_variable %in% c("caurina", "rufina"))) +
scale_shape_manual(values = c(21, 25, 22, 23, 24)) +
theme_minimal()
ord_plot +
geom_point(aes(shape = mm_final$SUPSPECIES), size = 3, position = position_dodge(width = 0.2), data = subset(mm_final, SUBSPECIES == "caurina" & order_variable %in% c("caurina", "rufina"))) +
scale_shape_manual(values = c(21, 25, 22, 23, 24)) +
theme_minimal()
ord_plot +
geom_point(aes(shape = mm_final$SUPSPECIES), size = 3, position = position_dodge(width = 0.2), data = subset(mm_final, mm_final$SUBSPECIES == "caurina" & mm_final$SUBSPECIES %in% c("caurina", "rufina"))) +
scale_shape_manual(values = c(21, 25, 22, 23, 24)) +
theme_minimal()
View(z_score_caurina)
mm_final_std <- scale(mm_final[,c(5:12)], scale = TRUE, center = T) ## z-transform data
View(mm_final_pca)
mm_final_pca
ord_plot <-ggord(mm_final_pca, mm_final$order,
cols= col.pallete,
xlims = c(-6,7), ylims = c(-10, 8), veclsz = 0.75,
grp_title = "subspecies"
)
ord_plot
ord_plot +  scale_shape_manual(values = c(21, 25, 22, 23, 24))
View(mm_final_pca)
mm_final_pca_testing <- mm_final_pca[order(mm_final_pca$subspecies), ]
mm_final_pca_testing <- mm_final_pca[order(mm_final_pca$SUBSPECIES), ]
mm_final_pca
View(mm_final_pca)
View(mm_final_std)
mm_final$order
mm_final_std <- scale(mm_final[,c(5:12)], scale = TRUE, center = T) ## z-transform data
mm_final_pca <- prcomp(mm_final_std, scale = TRUE) ## pca of transformed data
mm_final_pca$rotation <- mm_final_pca$rotation *9 ## make the arrows on the PCA longer
mm_final$orderpca <- factor(mm_final$SUBSPECIES, levels =c("maxima","sanaka","insignis","rufina", "caurina"))
ord_plot <-ggord(mm_final_pca, mm_final$orderpca,
cols= col.pallete,
xlims = c(-6,7), ylims = c(-10, 8), veclsz = 0.75,
grp_title = "subspecies"
)
ord_plot +  scale_shape_manual(values = c(21, 25, 22, 23, 24))
mm_final$orderpca <- factor(mm_final$SUBSPECIES, levels =c("maxima","sanaka","insignis","caurina","rufina"))
ord_plot <-ggord(mm_final_pca, mm_final$orderpca,
cols= col.pallete,
xlims = c(-6,7), ylims = c(-10, 8), veclsz = 0.75,
grp_title = "subspecies"
)
ord_plot +  scale_shape_manual(values = c(21, 25, 22, 23, 24))
ord_plot <-ggord(mm_final_pca, mm_final$order,
cols= col.pallete,
xlims = c(-6,7), ylims = c(-10, 8), veclsz = 0.75,
grp_title = "subspecies"
)
ord_plot +
scale_shape_manual(values = c(21, 25, 22, 23, 24)) +
theme(axis.text.x = element_text(size = 12),  # Adjust the size of x-axis labels
axis.text.y = element_text(size = 12)   # Adjust the size of y-axis labels
)
ord_plot +
scale_shape_manual(values = c(21, 25, 22, 23, 24)) +
theme(axis.text.x = element_text(size = 14),  # Adjust the size of x-axis labels
axis.text.y = element_text(size = 14)   # Adjust the size of y-axis labels
legend.text = element_text(size = 14),  # Adjust the size of legend text
legend.title = element_text(size = 16)  # Adjust the size of legend title
)
ord_plot +
scale_shape_manual(values = c(21, 25, 22, 23, 24)) +
theme(axis.text.x = element_text(size = 14),  # Adjust the size of x-axis labels
axis.text.y = element_text(size = 14),   # Adjust the size of y-axis labels
legend.text = element_text(size = 14),  # Adjust the size of legend text
legend.title = element_text(size = 16)  # Adjust the size of legend title
)
ord_plot +
scale_shape_manual(values = c(21, 25, 22, 23, 24)) +
theme(axis.text.x = element_text(size = 14),  # Adjust the size of x-axis labels
axis.text.y = element_text(size = 14),   # Adjust the size of y-axis labels
legend.text = element_text(size = 14),  # Adjust the size of legend text
legend.title = element_text(size = 16),  # Adjust the size of legend title
axis.title.x = element_text(size = 16),     # Adjust the size of x-axis title
axis.title.y = element_text(size = 16)      # Adjust the size of y-axis title
)
library(devtools)
devtools
? devtools
library(tidyverse)
? tidyverse
? ggplot
