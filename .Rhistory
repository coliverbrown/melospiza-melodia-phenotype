mm_final_pca$rotation <- mm_final_pca$rotation *9 ## make the arrows on the PCA longer
ggord(mm_final_pca, mm_final$order,
cols= col.pallete,
xlims = c(-6,7), ylims = c(-10, 8), veclsz = 0.75,
grp_title = "subspecies"
) +
scale_shape_manual(values = c(21,25,22,23,24))
order_variable <- factor(mm_final$SUBSPECIES, levels = c("caurina", "rufina"))
ord_plot +
geom_point(aes(shape = subspecies), size = 3, position = position_dodge(width = 0.2), data = subset(mm_final, subspecies == "caurina" & order_variable %in% c("caurina", "rufina"))) +
scale_shape_manual(values = c(21, 25, 22, 23, 24)) +
theme_minimal()
ord_plot <-ggord(mm_final_pca, mm_final$order,
cols= col.pallete,
xlims = c(-6,7), ylims = c(-10, 8), veclsz = 0.75,
grp_title = "subspecies"
)
order_variable <- factor(mm_final$SUBSPECIES, levels = c("caurina", "rufina"))
ord_plot +
geom_point(aes(shape = subspecies), size = 3, position = position_dodge(width = 0.2), data = subset(mm_final, subspecies == "caurina" & order_variable %in% c("caurina", "rufina"))) +
scale_shape_manual(values = c(21, 25, 22, 23, 24)) +
theme_minimal()
ord_plot +
geom_point(aes(shape = subspecies), size = 3, position = position_dodge(width = 0.2), data = subset(mm_final, SUBSPECIES == "caurina" & order_variable %in% c("caurina", "rufina"))) +
scale_shape_manual(values = c(21, 25, 22, 23, 24)) +
theme_minimal()
ord_plot +
geom_point(aes(shape = SUPSPECIES), size = 3, position = position_dodge(width = 0.2), data = subset(mm_final, SUBSPECIES == "caurina" & order_variable %in% c("caurina", "rufina"))) +
scale_shape_manual(values = c(21, 25, 22, 23, 24)) +
theme_minimal()
ord_plot +
geom_point(aes(shape = mm_final$SUPSPECIES), size = 3, position = position_dodge(width = 0.2), data = subset(mm_final, SUBSPECIES == "caurina" & order_variable %in% c("caurina", "rufina"))) +
scale_shape_manual(values = c(21, 25, 22, 23, 24)) +
theme_minimal()
ord_plot +
geom_point(aes(shape = mm_final$SUPSPECIES), size = 3, position = position_dodge(width = 0.2), data = subset(mm_final, mm_final$SUBSPECIES == "caurina" & mm_final$SUBSPECIES %in% c("caurina", "rufina"))) +
scale_shape_manual(values = c(21, 25, 22, 23, 24)) +
theme_minimal()
View(z_score_caurina)
mm_final_std <- scale(mm_final[,c(5:12)], scale = TRUE, center = T) ## z-transform data
View(mm_final_pca)
mm_final_pca
ord_plot <-ggord(mm_final_pca, mm_final$order,
cols= col.pallete,
xlims = c(-6,7), ylims = c(-10, 8), veclsz = 0.75,
grp_title = "subspecies"
)
ord_plot
ord_plot +  scale_shape_manual(values = c(21, 25, 22, 23, 24))
View(mm_final_pca)
mm_final_pca_testing <- mm_final_pca[order(mm_final_pca$subspecies), ]
mm_final_pca_testing <- mm_final_pca[order(mm_final_pca$SUBSPECIES), ]
mm_final_pca
View(mm_final_pca)
View(mm_final_std)
mm_final$order
mm_final_std <- scale(mm_final[,c(5:12)], scale = TRUE, center = T) ## z-transform data
mm_final_pca <- prcomp(mm_final_std, scale = TRUE) ## pca of transformed data
mm_final_pca$rotation <- mm_final_pca$rotation *9 ## make the arrows on the PCA longer
mm_final$orderpca <- factor(mm_final$SUBSPECIES, levels =c("maxima","sanaka","insignis","rufina", "caurina"))
ord_plot <-ggord(mm_final_pca, mm_final$orderpca,
cols= col.pallete,
xlims = c(-6,7), ylims = c(-10, 8), veclsz = 0.75,
grp_title = "subspecies"
)
ord_plot +  scale_shape_manual(values = c(21, 25, 22, 23, 24))
mm_final$orderpca <- factor(mm_final$SUBSPECIES, levels =c("maxima","sanaka","insignis","caurina","rufina"))
ord_plot <-ggord(mm_final_pca, mm_final$orderpca,
cols= col.pallete,
xlims = c(-6,7), ylims = c(-10, 8), veclsz = 0.75,
grp_title = "subspecies"
)
ord_plot +  scale_shape_manual(values = c(21, 25, 22, 23, 24))
ord_plot <-ggord(mm_final_pca, mm_final$order,
cols= col.pallete,
xlims = c(-6,7), ylims = c(-10, 8), veclsz = 0.75,
grp_title = "subspecies"
)
ord_plot +
scale_shape_manual(values = c(21, 25, 22, 23, 24)) +
theme(axis.text.x = element_text(size = 12),  # Adjust the size of x-axis labels
axis.text.y = element_text(size = 12)   # Adjust the size of y-axis labels
)
ord_plot +
scale_shape_manual(values = c(21, 25, 22, 23, 24)) +
theme(axis.text.x = element_text(size = 14),  # Adjust the size of x-axis labels
axis.text.y = element_text(size = 14)   # Adjust the size of y-axis labels
legend.text = element_text(size = 14),  # Adjust the size of legend text
legend.title = element_text(size = 16)  # Adjust the size of legend title
)
ord_plot +
scale_shape_manual(values = c(21, 25, 22, 23, 24)) +
theme(axis.text.x = element_text(size = 14),  # Adjust the size of x-axis labels
axis.text.y = element_text(size = 14),   # Adjust the size of y-axis labels
legend.text = element_text(size = 14),  # Adjust the size of legend text
legend.title = element_text(size = 16)  # Adjust the size of legend title
)
ord_plot +
scale_shape_manual(values = c(21, 25, 22, 23, 24)) +
theme(axis.text.x = element_text(size = 14),  # Adjust the size of x-axis labels
axis.text.y = element_text(size = 14),   # Adjust the size of y-axis labels
legend.text = element_text(size = 14),  # Adjust the size of legend text
legend.title = element_text(size = 16),  # Adjust the size of legend title
axis.title.x = element_text(size = 16),     # Adjust the size of x-axis title
axis.title.y = element_text(size = 16)      # Adjust the size of y-axis title
)
library(devtools)
devtools
? devtools
library(tidyverse)
? tidyverse
? ggplot
## set working directory
setwd("C:/Users/brown/GitHub/melospiza-melodia-phenotype/")
## install packages and turn them on
# install.packages("tidyverse")
# install.packages("ggplot2")
# install.packages("devtools")
# install_github("fawda123/ggord")
# install.packages("corrplot")
library(corrplot)
library(devtools)
library(tidyverse)
library(ggplot2)
library(ggord)
library(ggpubr)
## bring in mm_final again (to skip all the above steps)
mm_final <- read.csv("melospiza-melodia-filtered.csv") ##edited raw data
########## Summary Statistics ##########
### Mass statistics
mm_final %>%
group_by(SUBSPECIES) %>%
summarize(mean_mass = mean(MASS))
mm_final %>%
group_by(SUBSPECIES) %>%
summarise(sd_mass = sd(MASS))
### WCH statistics
mm_final %>%
group_by(SUBSPECIES) %>%
summarize(mean_WCH = mean(WCH))
mm_final %>%
group_by(SUBSPECIES) %>%
summarize(sd_WCH = sd(WCH))
### TL Statistics
mm_final %>%
group_by(SUBSPECIES) %>%
summarize(mean_TL = mean(TL))
mm_final %>%
group_by(SUBSPECIES) %>%
summarize(sd_TL = sd(TL))
### TS statistics
mm_final %>%
group_by(SUBSPECIES) %>%
summarize(mean_TS = mean(TS))
mm_final %>%
group_by(SUBSPECIES) %>%
summarize(sd_TS = sd(TS))
### BL Statistics
mm_final %>%
group_by(SUBSPECIES) %>%
summarize(mean_BL = mean(BL))
mm_final %>%
group_by(SUBSPECIES) %>%
summarize(sd_BL = sd(BL))
### BLH Statistics
mm_final %>%
group_by(SUBSPECIES) %>%
summarize(mean_BLH = mean(BLH))
mm_final %>%
group_by(SUBSPECIES) %>%
summarize(sd_BLH = sd(BLH))
### BLW statistics
mm_final %>%
group_by(SUBSPECIES) %>%
summarize(mean_BLW = mean(BLW))
mm_final %>%
group_by(SUBSPECIES) %>%
summarize(sd_BLW = sd(BLW))
### SKL Statistics
mm_final %>%
group_by(SUBSPECIES) %>%
summarize(mean_SKL = mean(SKL))
mm_final %>%
group_by(SUBSPECIES) %>%
summarize(sd_SKL = sd(SKL))
## Color Pallete (colorblind friendly) - from https://personal.sron.nl/~pault/data/colourschemes.pdf
# maxima = indigo
col.maxima <- c("#332288")
# sanaka = teal
col.sanaka <- c("#44AA99")
# insignis = green
col.insignis <- c("#117733")
# caurina = sand
col.caurina <- c("#DDCC77")
# rufina = rose
col.rufina <- c("#CC6677")
col.pallete <- c(col.maxima, col.sanaka, col.insignis,col.caurina,col.rufina)
## Reorder for West to East distribution
mm_final$order <- factor(mm_final$SUBSPECIES, levels =c("maxima","sanaka","insignis","caurina", "rufina"))
m <- ggplot(data=mm_final, aes(order, MASS))+
geom_boxplot(color = 'black', fill = col.pallete)+
labs(x = "Subspecies",y= "Mass (g)")
w <- ggplot(data=mm_final, aes(order, WCH))+
geom_boxplot(color = 'black', fill = col.pallete)+
labs(x = "Subspecies", y = "Wing Chord (mm)", show.legend = T)
t <- ggplot(data=mm_final, aes(order, TL))+
geom_boxplot(color = 'black', fill = col.pallete)+
labs(y = "Tail Length (mm)")
s <- ggplot(data=mm_final, aes(order, TS))+
geom_boxplot(color = 'black', fill = col.pallete)+
labs(y = "Tarsus Length(mm)")
b <- ggplot(data=mm_final, aes(order, BL))+
geom_boxplot(color = 'black', fill = col.pallete)+
labs(y = "Bill Length(mm)")
h <- ggplot(data=mm_final, aes(order, BLH))+
geom_boxplot(color = 'black', fill = col.pallete)+
labs(y = "Bill Height(mm)")
d <- ggplot(data=mm_final, aes(order, BLW))+
geom_boxplot(color = 'black', fill = col.pallete)+
labs(y = "Bill Width (mm)")
k <- ggplot(data=mm_final, aes(order, SKL))+
geom_boxplot(color = 'black', fill = col.pallete)+
labs(y = "Skull Length (mm)")
# theme_set(theme_bw())
theme_update(panel.background = element_rect(fill = "white", color = "black"),
axis.title.x = element_blank(),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size =15),
axis.text.y =element_text(size=12))
figure <-ggarrange(m, w, t, s, b, h, d, k,
labels = c("a", "b", "c", "d", "e", "f","g","h"))
figure
png("boxplots-for-defense.png")
figure <-ggarrange(m, w, t, s, b, h, d, k,
labels = c("a", "b", "c", "d", "e", "f","g","h"))
figure
dev.off()
png("boxplots-for-defense.png", width=1000, height = 900, units = 'px')
figure <-ggarrange(m, w, t, s, b, h, d, k,
labels = c("a", "b", "c", "d", "e", "f","g","h"))
figure
dev.off()
png("boxplots-for-defense.png", width=10, height = 9, units = 'in')
png("boxplots-for-defense.png", width=10, height = 9, units = 'in', res = 72)
figure <-ggarrange(m, w, t, s, b, h, d, k,
labels = c("a", "b", "c", "d", "e", "f","g","h"))
figure
dev.off()
png("boxplots-for-defense.png", width=11, height = 10, units = 'in', res = 72)
figure <-ggarrange(m, w, t, s, b, h, d, k,
labels = c("a", "b", "c", "d", "e", "f","g","h"))
figure
dev.off()
png("boxplots-for-defense.png", width=11, height = 10, units = 'in', res = 1200)
figure <-ggarrange(m, w, t, s, b, h, d, k,
labels = c("a", "b", "c", "d", "e", "f","g","h"))
figure
dev.off()
mm_final_std <- scale(mm_final[,c(5:12)], scale = TRUE, center = T) ## z-transform data
mm_final_pca <- prcomp(mm_final_std, scale = TRUE) ## pca of transformed data
mm_final_pca$rotation <- mm_final_pca$rotation *9 ## make the arrows on the PCA longer
ord_plot <-ggord(mm_final_pca, mm_final$order,
cols= col.pallete,
xlims = c(-6,7), ylims = c(-10, 8), veclsz = 0.75,
grp_title = "subspecies"
)
ord_plot +
scale_shape_manual(values = c(21, 25, 22, 23, 24)) +
theme(axis.text.x = element_text(size = 16),  # Adjust the size of x-axis labels
axis.text.y = element_text(size = 16),   # Adjust the size of y-axis labels
legend.text = element_text(size = 16),  # Adjust the size of legend text
legend.title = element_text(size = 18),  # Adjust the size of legend title
axis.title.x = element_text(size = 18),     # Adjust the size of x-axis title
axis.title.y = element_text(size = 18)      # Adjust the size of y-axis title
)
png("pca-for-defense.png", width = 12, height = 8, res = 300, units = "in")
ord_plot +
scale_shape_manual(values = c(21, 25, 22, 23, 24)) +
theme(axis.text.x = element_text(size = 16),  # Adjust the size of x-axis labels
axis.text.y = element_text(size = 16),   # Adjust the size of y-axis labels
legend.text = element_text(size = 16),  # Adjust the size of legend text
legend.title = element_text(size = 18),  # Adjust the size of legend title
axis.title.x = element_text(size = 18),     # Adjust the size of x-axis title
axis.title.y = element_text(size = 18)      # Adjust the size of y-axis title
)
dev.copy2pdf(file = "./pca_plot.pdf", width = 8.5, height = 11, bg = "white", compress = F, out.type= "pdf")
#dev.copy2pdf(file = "./pca_plot.pdf", width = 8.5, height = 11, bg = "white", compress = F, out.type= "pdf")
dev.off()
par()
par(mar = c(5,5,5,5))
png("pca-for-defense.png", width = 12, height = 8, res = 300, units = "in")
par(mar = c(5,5,5,5))
ord_plot +
scale_shape_manual(values = c(21, 25, 22, 23, 24)) +
theme(axis.text.x = element_text(size = 16),  # Adjust the size of x-axis labels
axis.text.y = element_text(size = 16),   # Adjust the size of y-axis labels
legend.text = element_text(size = 16),  # Adjust the size of legend text
legend.title = element_text(size = 18),  # Adjust the size of legend title
axis.title.x = element_text(size = 18),     # Adjust the size of x-axis title
axis.title.y = element_text(size = 18)      # Adjust the size of y-axis title
)
#dev.copy2pdf(file = "./pca_plot.pdf", width = 8.5, height = 11, bg = "white", compress = F, out.type= "pdf")
dev.off()
par(mar = c(5,5,5,5))
ord_plot +
scale_shape_manual(values = c(21, 25, 22, 23, 24)) +
theme(axis.text.x = element_text(size = 16),  # Adjust the size of x-axis labels
axis.text.y = element_text(size = 16),   # Adjust the size of y-axis labels
legend.text = element_text(size = 16),  # Adjust the size of legend text
legend.title = element_text(size = 18),  # Adjust the size of legend title
axis.title.x = element_text(size = 18),     # Adjust the size of x-axis title
axis.title.y = element_text(size = 18)      # Adjust the size of y-axis title
)
png("pca-for-defense.png", width = 10, height = 9, res = 300, units = "in")
ord_plot +
scale_shape_manual(values = c(21, 25, 22, 23, 24)) +
theme(axis.text.x = element_text(size = 16),  # Adjust the size of x-axis labels
axis.text.y = element_text(size = 16),   # Adjust the size of y-axis labels
legend.text = element_text(size = 16),  # Adjust the size of legend text
legend.title = element_text(size = 18),  # Adjust the size of legend title
axis.title.x = element_text(size = 18),     # Adjust the size of x-axis title
axis.title.y = element_text(size = 18)      # Adjust the size of y-axis title
)
#dev.copy2pdf(file = "./pca_plot.pdf", width = 8.5, height = 11, bg = "white", compress = F, out.type= "pdf")
dev.off()
## bring in mm_final again (to skip all the above steps)
mm_final <- read.csv("melospiza-melodia-filtered.csv") ##edited raw data
## install packages and turn them on
# install.packages("tidyverse")
# install.packages("ggplot2")
# install.packages("devtools")
# install_github("fawda123/ggord")
# install.packages("corrplot")
library(corrplot)
library(devtools)
library(tidyverse)
library(ggplot2)
library(ggord)
library(ggpubr)
## Color Pallete (colorblind friendly) - from https://personal.sron.nl/~pault/data/colourschemes.pdf
# maxima = indigo
col.maxima <- c("#332288")
# sanaka = teal
col.sanaka <- c("#44AA99")
# insignis = green
col.insignis <- c("#117733")
# caurina = sand
col.caurina <- c("#DDCC77")
# rufina = rose
col.rufina <- c("#CC6677")
col.pallete <- c(col.maxima, col.sanaka, col.insignis,col.caurina,col.rufina)
## Reorder for West to East distribution
mm_final$order <- factor(mm_final$SUBSPECIES, levels =c("maxima","sanaka","insignis","caurina", "rufina"))
b <- ggplot(data=mm_final, aes(order, BL))+
geom_boxplot(color = 'black', fill = col.pallete)+
labs(y = "Bill Length(mm)")
b
# theme_set(theme_bw())
theme_update(panel.background = element_rect(fill = "white", color = "black"),
axis.title.x = element_blank(),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size =15),
axis.text.y =element_text(size=12))
b
h <- ggplot(data=mm_final, aes(order, BLH))+
geom_boxplot(color = 'black', fill = col.pallete)+
labs(y = "Bill Height(mm)")
d <- ggplot(data=mm_final, aes(order, BLW))+
geom_boxplot(color = 'black', fill = col.pallete)+
labs(y = "Bill Width (mm)")
h
png("bill-height.png", width = 800, height = 500)
png("bill-height.png", width = 800, height = 500, units = "px")
dev.off()
png("bill-height.png", width = 800, height = 500, units = "px")
h
dev.off()
png("bill-height.png", width = 800, height = 500, units = "px", res = 1200)
h
dev.off()
png("bill-height.png", width = 800, height = 500, units = "px", quality =75)
png("bill-height.png", width = 800, height = 500, units = "px")
h
dev.off()
png("bill-height.png", width = 800, height = 500, units = "px", res = 100)
h
dev.off()
png("bill-height.png", width = 800, height = 500, units = "px", res = 200)
h
dev.off()
h
d
m <- ggplot(data=mm_final, aes(order, MASS))+
geom_boxplot(color = 'black', fill = col.pallete)+
labs(x = "Subspecies",y= "Mass (g)")
m
w <- ggplot(data=mm_final, aes(order, WCH))+
geom_boxplot(color = 'black', fill = col.pallete)+
labs(x = "Subspecies", y = "Wing Chord (mm)", show.legend = T)
t <- ggplot(data=mm_final, aes(order, TL))+
geom_boxplot(color = 'black', fill = col.pallete)+
labs(y = "Tail Length (mm)")
s <- ggplot(data=mm_final, aes(order, TS))+
geom_boxplot(color = 'black', fill = col.pallete)+
labs(y = "Tarsus Length(mm)")
d <- ggplot(data=mm_final, aes(order, BLW))+
geom_boxplot(color = 'black', fill = col.pallete)+
labs(y = "Bill Width (mm)")
k <- ggplot(data=mm_final, aes(order, SKL))+
geom_boxplot(color = 'black', fill = col.pallete)+
labs(y = "Skull Length (mm)")
w
t
s
b
k
## set working directory
setwd("C:/Users/brown/GitHub/melospiza-melodia-phenotype/")
library(devtools)
library(tidyverse)
library(ggplot2)
library(ggord)
library(ggpubr)
source("C:/Users/brown/GitHub/CleanORNISFull/skinmeas-split-fun.R") ## function to clean skin measurements column
mm_full <- read.csv("melospiza-melodia-fullflat-raw.csv") ##unedited raw data
for (i in 1:dim(mm_full)[1]){
temp <- skin.meas.split(mm_full[i,"SKINMEAS"])
if(length(temp) >= 1) {
mm_full[i,29:35] <- temp
}
else {
mm_full[i,29:35]<- c(rep(NA,7))
}
}
## Select columns of interest
mm_select <- mm_full[,c(1,4,6,7,18,29:35)]
colnames(mm_select) <- c("CATSFX","SUBSPECIES","AGE","SEX","MASS","WCH","TL","TS","BL","BLH","BLW","SKL")
mm_full_filtered <- mm_select %>%
filter(AGE == "AD" | AGE == "AHY") %>%
filter(SEX== "M")
## Create separate data frames for each subspecies
mm_maxima_full <- mm_full_filtered %>% filter(SUBSPECIES == "maxima")
mm_sanaka_full <- mm_full_filtered %>% filter(SUBSPECIES == "sanaka")
mm_insignis_full <- mm_full_filtered %>% filter(SUBSPECIES == "insignis")
mm_caurina_full <- mm_full_filtered %>% filter(SUBSPECIES == "caurina")
mm_rufina_full <- mm_full_filtered %>% filter(SUBSPECIES == "rufina")
## Make new data frames for each subspecies and pull out numerical data
# maxima
mm_maxima <- mm_full_filtered %>%
filter(SUBSPECIES == "maxima") %>%
select(MASS, WCH, TL, TS, BL, BLH, BLW, SKL)
z_score_maxima <- scale(mm_maxima)  ## Compute z scores
outliers_maxima <- which(z_score_maxima >=3)    ## tag the rows containing outliers
mm_maxima_clean <- mm_maxima_full[-c(outliers_maxima),]  ## make new dataframe without outliers
## Repeat above steps for each subspecies
# sanaka
mm_sanaka <- mm_full_filtered %>%
filter(SUBSPECIES == "sanaka") %>%
select(MASS, WCH, TL, TS, BL, BLH, BLW, SKL)
z_score_sanaka <- scale(mm_sanaka)  ## Compute z scores
outliers_sanaka <- which(z_score_sanaka >=3)    ## tag the rows containing outliers
mm_sanaka_clean <- mm_sanaka_full[-c(outliers_sanaka),]  ## make new dataframe without outliers
# insignis
mm_insignis <- mm_full_filtered %>%
filter(SUBSPECIES == "insignis") %>%
select(MASS, WCH, TL, TS, BL, BLH, BLW, SKL)
z_score_insignis <- scale(mm_insignis)  ## Compute z scores
outliers_insignis <- which(z_score_insignis >=3)    ## tag the rows containing outliers
# caurina
mm_caurina <- mm_full_filtered %>%
filter(SUBSPECIES == "caurina") %>%
select(MASS, WCH, TL, TS, BL, BLH, BLW, SKL)
z_score_caurina <- scale(mm_caurina)  ## Compute z scores
outliers_caurina <- which(z_score_caurina >=3)    ## tag the rows containing outliers
mm_caurina_clean <- mm_caurina_full[-c(outliers_caurina),]  ## make new dataframe without outliers
# rufina
mm_rufina <- mm_full_filtered %>%
filter(SUBSPECIES == "rufina") %>%
select(MASS, WCH, TL, TS, BL, BLH, BLW, SKL)
z_score_rufina <- scale(mm_rufina)  ## Compute z scores
outliers_rufina <- which(z_score_rufina >=3)    ## tag the rows containing outliers
mm_rufina_clean <- mm_rufina_full[-c(outliers_rufina),]  ## make new dataframe without outliers
mm_final_std <- scale(mm_final[,c(5:12)], scale = TRUE, center = T) ## z-transform data
mm_final_pca <- prcomp(mm_final_std, scale = TRUE) ## pca of transformed data
View(mm_final_pca)
mm_final_pca
tar.aov <- aov(TS ~ SUBSPECIES, data = mm_final)
summary(tar.aov)
tar.tuk <- TukeyHSD(tar.aov)
tar.tuk
## bring in mm_final again (to skip all the above steps)
mm_final <- read.csv("melospiza-melodia-filtered.csv") ##edited raw data
## set working directory
setwd("C:/Users/brown/GitHub/melospiza-melodia-phenotype/")
## install packages and turn them on
# install.packages("tidyverse")
# install.packages("ggplot2")
# install.packages("devtools")
# install_github("fawda123/ggord")
# install.packages("corrplot")
library(corrplot)
library(devtools)
library(tidyverse)
library(ggplot2)
library(ggord)
library(ggpubr)
mm_final_std <- scale(mm_final[,c(5:12)], scale = TRUE, center = T) ## z-transform data
mm_final_pca <- prcomp(mm_final_std, scale = TRUE) ## pca of transformed data
View(mm_final_pca)
mm_final_pca$rotation
mm_final_pca$x
summary(mm_final_pca)
